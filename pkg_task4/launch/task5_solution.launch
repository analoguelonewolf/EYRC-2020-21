<launch>
  <rosparam file ="$(find pkg_task4)/config/config_pyiot.yaml"/>

  <!-- Add Models PATH for Gazebo -->
  <env name="GAZEBO_MODEL_PATH" value="$(find pkg_vb_sim)/models"/>

  <!-- Arguments -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="rviz" default = "false"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="extra_gazebo_args" default="--verbose"/>

  <!-- Gazebo with World File -->
  <include file="$(find pkg_vb_sim)/launch/task6_simulation.launch"/>
    <!-- <arg name="world_name" value="$(find pkg_vb_sim)/worlds/example_two_ur5.world"/> -->
    
  <!-- Spawn two UR5 in Gazebo -->
  <!--<include file = "$(find pkg_vb_sim)/launch/two_ur5_gazebo.launch" />-->

  <!-- Launch two move_group nodes for the two UR5 Arms -->
  <include file="$(find pkg_vb_sim)/launch/two_ur5_test.launch" />

  <group ns="ur5_1"> 
    <!-- Add Planning Scene in RViz -->
    <arg name="scene_file" default="$(find pkg_task4)/config/rviz/ur5_1_scene.scene"/> 
    <node name = "moveit_publish_scene_from_text" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg scene_file)"/>
  </group>

  <group ns="ur5_2"> 
    <!-- Add Planning Scene in RViz -->
    <arg name="scene_file" default="$(find pkg_task4)/config/rviz/ur5_2_scene.scene"/> 
    <node name = "moveit_publish_scene_from_text" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg scene_file)"/>
  </group>

  <!-- Run colour talker Node -->
  <!-- This node detects and publishes colour of packages -->
  <!--node name= "node_t5_qr_decode" pkg= "pkg_task4" type="node_t5_qr_decode.py" output="screen"/-->

  <!-- Run ros iot bridge Node -->
  <!-- This node recieves order from mqtt -->
  <!-- This node also publishes goals to ur5_1 arm -->
  <!--node name= "node_t5_ros_iot_bridge" pkg= "pkg_task4" type="node_t5_ros_iot_bridge.py" output="screen"/-->

  <!-- Run ur5_1 Node -->
  <!-- This node controls ur5_1 node -->
  <!-- This node also publishes goals to msgMqttGoals and updates sheet for dispatched items-->
  <!--node name= "node_t5_ur5_1" pkg= "pkg_task5" type="node_t5_ur5_1.py" output="screen"/-->

  <!-- Run ur5_2 Node -->
  <!-- This node controls ur5_2 node -->
  <!-- This node also updates sheet for shipped items -->
  <!--node name= "node_t5_ur5_2" pkg= "pkg_task4" type="node_t5_ur5_2.py" output="screen"/-->


  <!-- Recording Bag File for Submission -->
    <arg name="record" default="false"/>
    <arg name="rec_name" default="t5.bag"/>

    <group if="$(arg record)">
        <node name="rosbag_record_pick" pkg="rosbag" type="record"
       args="record -O $(find pkg_task4)/bag_files/$(arg rec_name) --chunksize=10 /eyrc/vb/ur5_1/vacuum_gripper/logical_camera/ur5_1 /eyrc/vb/ur5_2/vacuum_gripper/logical_camera/ur5_2" output="screen"/>
  </group>

  <!--node pkg="pkg_task4" type="shell_webpages_launch.sh" name="shell_webpages_launch" output="screen"/-->
    <!--param name="cmd" value="$(find pkg_task4)/launch/shell-webpages-launch.sh"/-->


</launch>
